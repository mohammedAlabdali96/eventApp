[{"/home/mo/projects/eventApp/App/client/src/App.js":"1","/home/mo/projects/eventApp/App/client/src/components/Form/Form.js":"2","/home/mo/projects/eventApp/App/client/src/index.js":"3","/home/mo/projects/eventApp/App/client/src/api/index.js":"4","/home/mo/projects/eventApp/App/client/src/components/Posts/Post/styles.js":"5","/home/mo/projects/eventApp/App/client/src/styles.js":"6","/home/mo/projects/eventApp/App/client/src/actions/posts.js":"7","/home/mo/projects/eventApp/App/client/src/components/Posts/Posts.js":"8","/home/mo/projects/eventApp/App/client/src/components/Posts/Post/Post.js":"9"},{"size":1320,"mtime":1626275824115,"results":"10","hashOfConfig":"11"},{"size":3709,"mtime":1626275824115,"results":"12","hashOfConfig":"11"},{"size":454,"mtime":1626275824115,"results":"13","hashOfConfig":"11"},{"size":405,"mtime":1626275824115,"results":"14","hashOfConfig":"11"},{"size":962,"mtime":1626275824115,"results":"15","hashOfConfig":"11"},{"size":350,"mtime":1626275824115,"results":"16","hashOfConfig":"11"},{"size":1260,"mtime":1626275824115,"results":"17","hashOfConfig":"11"},{"size":874,"mtime":1626275824115,"results":"18","hashOfConfig":"11"},{"size":2371,"mtime":1626280706448,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"nug62p",{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/mo/projects/eventApp/App/client/src/App.js",["41"],"import React,{useState,useEffect} from 'react';\nimport{ Container, AppBar, Typography, Grow, Grid } from '@material-ui/core';\nimport Posts from './components/Posts/Posts';\nimport Form from './components/Form/Form'\nimport mm from './images/mm.png'\nimport useStyles from './styles'\nimport {useDispatch} from 'react-redux';\nimport { getPosts } from './actions/posts';\n\n\n\nconst App = () => {\n\n  const [currentId, setCurrentId ] = useState(null);\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  \n  useEffect(()=>{\n    dispatch(getPosts());\n  },[dispatch, currentId])\n\n  return (\n  <Container maxWidth='lg'>\n    <AppBar className={classes.appBar} position='static' color='inherit'>\n      <Typography className={classes.heading} varaint='h2' align=\"center\">Memories</Typography>\n      <img className={classes.img} src={mm} height=\"60\" />\n    </AppBar>\n    <Grow in>\n      <Container>\n        <Grid container justify=\"space-between\" alignItems=\"stretch\" spacing={3}>\n             <Grid item xs={12} sm={7}>\n                 <Posts setCurrentId={setCurrentId} />\n             </Grid>\n             <Grid item xs={12} sm={4}>\n                  <Form currentId={currentId} setCurrentId={setCurrentId} />\n             </Grid>\n        </Grid>\n      </Container>\n    </Grow>\n  </Container>\n  );\n}\n\nexport default App;\n","/home/mo/projects/eventApp/App/client/src/components/Form/Form.js",["42","43"],"import React,{useState, useEffect} from 'react';\nimport { TextField, Button, Typography, paper, Paper } from \"@material-ui/core\"\nimport FileBase from 'react-file-base64'\nimport useStyles from './styles'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { createPost, updatePost } from '../../actions/posts';\n\n\n\n\nconst Form =({setCurrentId, currentId})=>{\n    const [postData, setPostData] = useState({ creator: '',title:'', message:'',tags:'',selectedFile:''});\n    const classes = useStyles()\n    const post = useSelector((state) => currentId ? state.posts.find((p)=> p._id === currentId ) : null);\n    const dispatch = useDispatch() \n\n    useEffect(()=>{\n        if(post) setPostData(post);\n\n    },[post])\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(currentId) {\n          dispatch(updatePost(currentId,postData))\n\n        }\n        else {\n        dispatch(createPost(postData));\n        }\n        clear()\n    }\n\n    const clear = () => {\n        setCurrentId(null)\n        setPostData({ creator: '',title:'', message:'',tags:'',selectedFile:''})\n\n    }\n\n    return (\n        <Paper className={`${classes.root} ${classes.form}`}>\n            <form\n             autoComplete=\"off\" \n             noValidate \n             className={classes.form}\n             onSubmit={handleSubmit}\n             >\n                 <Typography variant=\"h6\">\n                     {currentId ? 'updating event' : 'Creating event'}\n                 </Typography>\n                 <TextField \n                 name=\"creator\"\n                 variant=\"outlined\"\n                 label= \"Creator\"\n                 fullWidth\n                 value={postData.creator}\n                 onChange={(e) => setPostData({...postData ,creator: e.target.value})}\n                 />\n                 <TextField \n                 name=\"title\"\n                 variant=\"outlined\"\n                 label= \"title\"\n                 fullWidth\n                 value={postData.title}\n                 onChange={(e) => setPostData({...postData ,title: e.target.value})}\n                 />\n                <TextField \n                 name=\"message\"\n                 variant=\"outlined\"\n                 label= \"message\"\n                 fullWidth\n                 value={postData.message}\n                 onChange={(e) => setPostData({...postData ,message: e.target.value})}\n                 />\n                <TextField \n                 name=\"tags\"\n                 variant=\"outlined\"\n                 label= \"tags\"\n                 fullWidth\n                 value={postData.tags}\n                 onChange={(e) => setPostData({...postData ,tags: e.target.value.split(',')})}\n                 />\n                 <div className={classes.fileInput}>\n                   <FileBase \n                   type=\"file\"\n                   multiple={false}\n                   onDone={({base64}) => setPostData({...postData, selectedFile: base64})}\n                   />\n                 </div>\n                 <Button \n                 className={classes.buttonSubmit} \n                 variant=\"contained\" \n                 color=\"primary\"\n                 size=\"large\"\n                 type=\"submit\"\n                 fullWidth\n                 >\n                     submit\n                 </Button>\n                 <Button \n                 className={classes.buttonSubmit} \n                 variant=\"contained\" \n                 color=\"secondary\"\n                 size=\"small\"\n                 fullWidth\n                 onClick={clear}\n                 fullWidth\n                 >\n                     Clear\n                 </Button>\n\n             </form>\n\n        </Paper>\n    )\n}\n\n\nexport default Form;",["44","45"],"/home/mo/projects/eventApp/App/client/src/index.js",[],"/home/mo/projects/eventApp/App/client/src/api/index.js",[],"/home/mo/projects/eventApp/App/client/src/components/Posts/Post/styles.js",[],"/home/mo/projects/eventApp/App/client/src/styles.js",[],"/home/mo/projects/eventApp/App/client/src/actions/posts.js",[],"/home/mo/projects/eventApp/App/client/src/components/Posts/Posts.js",[],"/home/mo/projects/eventApp/App/client/src/components/Posts/Post/Post.js",[],{"ruleId":"46","severity":1,"message":"47","line":26,"column":7,"nodeType":"48","endLine":26,"endColumn":59},{"ruleId":"49","severity":1,"message":"50","line":2,"column":41,"nodeType":"51","messageId":"52","endLine":2,"endColumn":46},{"ruleId":"53","severity":1,"message":"54","line":107,"column":18,"nodeType":"55","endLine":107,"endColumn":27},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'paper' is defined but never used.","Identifier","unusedVar","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-global-assign","no-unsafe-negation"]